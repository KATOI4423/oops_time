use std::env;
use std::fs;
use std::path::Path;
use std::process::Command;

fn make_aumid_env()
{
	let metadata = cargo_metadata::MetadataCommand::new()
		.no_deps()
		.exec()
		.expect("Failed to read Cargo.toml metadata");

	let aumid = metadata
		.root_package()
		.and_then(|pkg| pkg.metadata.get("aumid").and_then(|v| v.as_str()))
		.expect("aumid not found in Cargo.toml")
        .to_string();

    println!("cargo:rustc-env=AUMID={}", aumid);
}

fn extract_main_content(html: &str) -> Option<String> {
    let start = html.find("<main")?;
    let start_tag_end = html[start..].find('>')? + start + 1;
    let end = html[start_tag_end..].find("</main>")? + start_tag_end;
    Some(html[start_tag_end..end].to_string())
}

fn make_license_rs()
{
    let top_dir = env::var("TOP_DIR").unwrap();
    let out_dir = env::var("OUT_DIR").unwrap();
    let license_path = Path::new(&top_dir).join("License.html");

    let license = fs::read_to_string(&license_path)
        .expect("Failed to read License.html");

    // innerHTMLとして使用するために、<main>内部を抽出
    let extracted = extract_main_content(&license)
        .unwrap_or_else(|| panic!("<main> block not found in {}", license_path.display()));

    let wrapped = format!(r#"<section class="license-block">{}</section>"#, extracted);

    let mut contents = String::new();
    contents.push_str("/// This file is automatically generated by build.rs\n");
    contents.push_str("pub const LICENSE_HTML: &str = r###\"");
    contents.push_str(&wrapped);
    contents.push_str("\"###;\n");

    let dest_path = Path::new(&out_dir).join("license.rs");
    fs::write(&dest_path, contents).expect("Failed to write license.rs");
}

fn make_ructc_version_env()
{
    let output = Command::new("rustc")
        .arg("--version")
        .output()
        .expect("Failed to get rustc vesion");

    let version = String::from_utf8_lossy(&output.stdout).trim().to_string();

    println!("cargo:rustc-env=RUSTC_VERSION={}", version);
}

fn main() {
	make_aumid_env();
    make_license_rs();
    make_ructc_version_env();
    tauri_build::build()
}
